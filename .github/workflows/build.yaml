name: Build FFmpeg and Navidrome Binaries

on:
  workflow_dispatch: # Allows manual triggering

jobs:
  build-ffmpeg:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install build tools and libraries
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            git wget build-essential automake autoconf libtool pkg-config \
            libopus-dev libmp3lame-dev libvorbis-dev openssl libssl-dev libtag1-dev zlib1g-dev nasm yasm

      - name: Compile FFmpeg decoders that have no packages
        run: |
          mkdir -p /home/runner/ffmpeg_sources /home/runner/ffmpeg_build /home/runner/bin &&
          cd /home/runner/ffmpeg_sources &&
          git clone --depth 1 https://github.com/xiph/opus.git &&
          cd opus &&
          ./autogen.sh &&
          ./configure --prefix="/home/runner/ffmpeg_build" --disable-shared &&
          make -j$(nproc) &&
          make install &&
          cd /home/runner/ffmpeg_sources &&
          git clone --depth 1 https://github.com/mstorsjo/fdk-aac.git &&
          cd fdk-aac &&
          autoreconf -fiv &&
          ./configure --prefix="/home/runner/ffmpeg_build" --disable-shared &&
          make -j$(nproc) &&
          make install

      - name: Compile FFmpeg
        run: |
          export PATH="$HOME/bin:$PATH";
          cd /home/runner/ffmpeg_sources &&
          git clone --depth 1 https://github.com/FFmpeg/FFmpeg.git &&
          cd FFmpeg &&
          PKG_CONFIG_PATH="$HOME/ffmpeg_build/lib/pkgconfig" ./configure \
            --prefix="$HOME/ffmpeg_build" \
            --pkg-config-flags="--static" \
            --extra-cflags="-I$HOME/ffmpeg_build/include -O3 -march=x86-64 -mtune=generic -pipe" \
            --extra-cxxflags="-O3 -march=x86-64 -mtune=generic -pipe" \
            --extra-ldflags="-L$HOME/ffmpeg_build/lib" \
            --extra-libs="-lpthread -lm" \
            --bindir="$HOME/bin" \
            --disable-everything \
            --enable-small \
            --enable-openssl \
            --enable-decoder=aac*,ac3*,opus,vorbis \
            --enable-demuxer=mov,m4v,matroska \
            --enable-muxer=mp3,mp4 \
            --enable-protocol=file \
            --enable-filter=aresample &&
          make -j$(nproc) &&
          make install
          
      - name: Download and install latest Go package
        run: |
          cd /home/runner/
          GO_VERSION=$(curl -s https://go.dev/VERSION?m=text | head -n 1)
          GO_TAR_URL="https://go.dev/dl/${GO_VERSION}.linux-amd64.tar.gz"
          curl -LO ${GO_TAR_URL}
          sudo rm -rf /usr/local/go
          sudo tar -C /usr/local -xzf ${GO_VERSION}.linux-amd64.tar.gz
          rm ${GO_VERSION}.linux-amd64.tar.gz
          export PATH=$PATH:/usr/local/go/bin


      - name: Download and install latest Go package
        run: |
          
          cd /home/runner/
          GO_VERSION=$(curl -s https://go.dev/VERSION?m=text | head -n 1)
          GO_TAR_URL="https://go.dev/dl/${GO_VERSION}.linux-amd64.tar.gz"
          curl -LO ${GO_TAR_URL}
          sudo rm -rf /usr/local/go
          sudo tar -C /usr/local -xzf ${GO_VERSION}.linux-amd64.tar.gz
          rm ${GO_VERSION}.linux-amd64.tar.gz
          export PATH=$PATH:/usr/local/go/bin

  
      - name: Set up Node.js 22.x
        uses: actions/setup-node@v4
        with:
          node-version: 22
          
      - name: Clone and build Navidrome   
        run: |
          cd /home/runner
          git clone https://github.com/navidrome/navidrome
          cd navidrome
          make setup        # Install build dependencies
          make build        # Build UI and server, generates a single executable
          
      - name: Verify binary output
        run: |
          cd /home/runner/navidrome
          ls navidrome
        
      - name: Upload Navidrome Binary as Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: navidrome
          path: /home/runner/navidrome/navidrome
          if-no-files-found: error
      
      - name: Verify FFmpeg Binaries
        run: |
          ls -lh /home/runner/bin/
          ls ffmpeg ffprobe

      - name: Upload FFmpeg Binaries as Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-binaries
          path: /home/runner/bin/
          if-no-files-found: error


