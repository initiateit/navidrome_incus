name: Create debootstrap image

on:
  workflow_dispatch: # Allows manual triggering
  workflow_call: # This makes the workflow reusable by other workflows

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends debootstrap

      - name: Create debootstrap directory
        run: mkdir -p $GITHUB_WORKSPACE/debian-minimal-image

      - name: Run debootstrap with packages from file
        run: |
          # Extract package list from .github/workflows/package.list
          PACKAGES=$(tr '\n' ',' < "$GITHUB_WORKSPACE/.github/workflows/package.list" | sed 's/,$//')
    
          # If PACKAGES is non-empty, add it to the --include flag
          if [ -n "$PACKAGES" ]; then
            sudo debootstrap --arch=amd64 --include=$PACKAGES bookworm $GITHUB_WORKSPACE/debian-minimal-image http://deb.debian.org/debian/
          else
            echo "No packages to include from package.list"
            sudo debootstrap --arch=amd64 bookworm $GITHUB_WORKSPACE/debian-minimal-image http://deb.debian.org/debian/
          fi

      - name: Chroot in and Fine-tune the install
        run: |
          imagedir="$GITHUB_WORKSPACE/debian-minimal-image"
          
          # Create a script to detect network interface names and set IP configuration on startup
          cat << 'EOS' > $imagedir/network-setup
          #!/bin/bash
          IFACE=$(ip -o link show | awk -F': ' '$2 !~ /lo/ {print $2; exit}')
          if [ -n "$IFACE" ]; then
            echo -e "auto $IFACE\niface $IFACE inet dhcp" > /etc/network/interfaces
            ifdown $IFACE || true
            ifup $IFACE
          else
            echo "No active network interface found!"
            exit 1
          fi
          EOS
      
          # Use sudo to move the script into the chroot environment's root directory
          sudo mkdir -p $imagedir/etc/network/if-up.d/
          sudo mv $imagedir/network-setup $imagedir/etc/network/if-up.d/network-setup
          sudo chmod +x $imagedir/etc/network/if-up.d/network-setup
      
          # Mount necessary filesystems before entering chroot
          sudo mount -t proc /proc $imagedir/proc
          sudo mount --rbind /sys $imagedir/sys
          sudo mount --rbind /dev $imagedir/dev
      
          # Chroot and run the network setup script (use sudo here)
          sudo chroot $imagedir /bin/bash $imagedir/etc/network/if-up.d/network-setup
      
          # Create another script to run inside chroot for cleanup and fine-tuning
          cat << 'EOS' > $imagedir/chroot-script.sh
          #!/bin/bash
          if [ -f "/etc/inittab" ]; then
              inittab="/etc/inittab"
              tty1='1:2345:respawn:/sbin/getty --noclear 38400 tty1'
              ttyx=':23:respawn:/sbin/getty 38400 tty'
              sed -i "s_^\(${tty1}\)_#\1_" "${inittab}"
              for tty in {2..6}; do
                  sed -i "s_^\(${tty}${ttyx}${tty}\)_#\1_" "${inittab}"
              done
          fi
      
          echo "en_AU.UTF-8 UTF-8" > /etc/locale.gen
          locale-gen && update-locale LANG=en_AU.UTF-8 && export LANG=en_AU.UTF-8
      
          rm -rf /usr/share/doc/* /usr/share/man/* /usr/share/info/*
          journalctl --vacuum-size=50M || true
          rm -rf /var/log/* /tmp/* /var/tmp/*
          apt-get clean && rm -rf /var/lib/apt/lists/*
          apt-get autoclean && apt-get autoremove --purge -y
          EOS
      
          chmod +x $imagedir/chroot-script.sh
      
          # Use sudo to move the cleanup script into the chroot environment's root directory
          sudo mv $imagedir/chroot-script.sh $imagedir/root/chroot-script.sh
      
          # Chroot and run the cleanup script (again, use sudo)
          sudo chroot $imagedir /bin/bash /root/chroot-script.sh
      
          # Clean up the script from the chroot environment
          sudo rm $imagedir/root/chroot-script.sh
      
          # Unmount filesystems using lazy unmount to avoid "target is busy" errors
          sudo umount -l $imagedir/proc
          sudo umount -l $imagedir/sys
          sudo umount -l $imagedir/dev



                
      - name: List contents of the workspace to check if debian-minimal-image exists
        run: ls -l $GITHUB_WORKSPACE
    
      - name: List contents of debian-minimal-image directory
        run: |
          if [ -d "$GITHUB_WORKSPACE/debian-minimal-image" ]; then
            ls -l $GITHUB_WORKSPACE/debian-minimal-image
          else
            echo "Directory debian-minimal-image not found!"
            exit 1
          fi
    
      - name: Archive the debootstrap image and create metadata.yaml and metadata.tar.gz
        run: |
          cd $GITHUB_WORKSPACE
          sudo tar -czvf debian-minimal-image.tar.gz debian-minimal-image
          
          # Create metadata.yaml with a UNIX timestamp for creation_date
          echo "architecture: x86_64" > metadata.yaml
          echo "creation_date: $(date -u +%s)" >> metadata.yaml  # UNIX timestamp
          echo "properties:" >> metadata.yaml
          echo "  description: Debian Bookworm Minimal" >> metadata.yaml
          echo "  os: debian" >> metadata.yaml
          echo "  release: bookworm" >> metadata.yaml
          echo "  variant: minbase" >> metadata.yaml

          # Archive metadata.yaml as well
          sudo tar -czvf metadata.tar.gz metadata.yaml

      - name: Upload the image artifact
        uses: actions/upload-artifact@v4
        with:
          name: debian-minimal-image
          path: debian-minimal-image.tar.gz
      
      - name: Upload the metadata artifactr
        uses: actions/upload-artifact@v4
        with:
          name: metadata
          path: metadata.tar.gz
