name: Create debootstrap image

on:
  workflow_dispatch: # Allows manual triggering
  workflow_call: # This makes the workflow reusable by other workflows

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends debootstrap

      - name: Create debootstrap directory
        run: mkdir -p $GITHUB_WORKSPACE/debian-minimal-image

      - name: Run debootstrap with packages from file
        run: |
          # Extract package list from .github/workflows/package.list
          PACKAGES=$(tr '\n' ',' < "$GITHUB_WORKSPACE/.github/workflows/package.list" | sed 's/,$//')
    
          # If PACKAGES is non-empty, add it to the --include flag
          if [ -n "$PACKAGES" ]; then
            sudo debootstrap --arch=amd64 --include=$PACKAGES bookworm $GITHUB_WORKSPACE/debian-minimal-image http://deb.debian.org/debian/
          else
            echo "No packages to include from package.list"
            sudo debootstrap --arch=amd64 bookworm $GITHUB_WORKSPACE/debian-minimal-image http://deb.debian.org/debian/
          fi

      - name: Chroot in and Fine tune the install
        run: |
          imagedir="$GITHUB_WORKSPACE/debian-minimal-image"
      
          # Create a script to run inside chroot
          cat << 'EOS' > $imagedir/chroot-script.sh
          #!/bin/bash
      
          # Disable getty processes. Login happens via SSH, and LXC / VMs don't require TTYs.
          if [ -f "/etc/inittab" ]; then
              inittab="/etc/inittab"
              tty1='1:2345:respawn:/sbin/getty --noclear 38400 tty1'
              ttyx=':23:respawn:/sbin/getty 38400 tty'
      
              # Comment out the getty process for tty1
              sed -i "s_^\(${tty1}\)_#\1_" "${inittab}"
      
              # Comment out getty processes for tty2 to tty6
              for tty in {2..6}; do
                  sed -i "s_^\(${tty}${ttyx}${tty}\)_#\1_" "${inittab}"
              done
          fi
      
          # Setup Network interface (DHCP default)
          echo -e "auto eth0\niface eth0 inet dhcp" > /etc/network/interfaces
          ifdown eth0 && ifup eth0
      
          # Clean Up
          apt-get install -y localepurge # Configure carefully if needed
          apt-get remove --purge -y manpages man-db
      
          # Remove unnecessary files
          rm -rf /usr/share/doc/*
          rm -rf /usr/share/man/*
          rm -rf /usr/share/info/*
          rm -rf /usr/share/locale/*  # Be cautious if locales are needed
          rm -rf /usr/share/zoneinfo/*  # Be cautious if timezone info is needed
      
          # Vacuum logs and remove log files
          journalctl --vacuum-size=50M
          rm -rf /var/log/*
          rm -rf /tmp/*
          rm -rf /var/tmp/*
      
          # Clean package lists and cache
          apt-get clean
          rm -rf /var/lib/apt/lists/*
      
          # Remove unnecessary packages
          apt-get autoclean
          apt autoremove --purge -y
      
          EOS
      
          # Make the script executable
          chmod +x $imagedir/chroot-script.sh
      
          # Chroot and run the script
          sudo chroot $imagedir /bin/bash /chroot-script.sh
      
          # Clean up the script after running
          sudo rm $imagedir/chroot-script.sh

                
      - name: List contents of the workspace to check if debian-minimal-image exists
        run: ls -l $GITHUB_WORKSPACE
    
      - name: List contents of debian-minimal-image directory
        run: |
          if [ -d "$GITHUB_WORKSPACE/debian-minimal-image" ]; then
            ls -l $GITHUB_WORKSPACE/debian-minimal-image
          else
            echo "Directory debian-minimal-image not found!"
            exit 1
          fi
    
      - name: Archive the debootstrap image and create metadata.yaml and metadata.tar.gz
        run: |
          cd $GITHUB_WORKSPACE
          sudo tar -czvf debian-minimal-image.tar.gz debian-minimal-image
          
          # Create metadata.yaml with a UNIX timestamp for creation_date
          echo "architecture: x86_64" > metadata.yaml
          echo "creation_date: $(date -u +%s)" >> metadata.yaml  # UNIX timestamp
          echo "properties:" >> metadata.yaml
          echo "  description: Debian Bookworm Minimal" >> metadata.yaml
          echo "  os: debian" >> metadata.yaml
          echo "  release: bookworm" >> metadata.yaml
          echo "  variant: minbase" >> metadata.yaml

          # Archive metadata.yaml as well
          sudo tar -czvf metadata.tar.gz metadata.yaml

      - name: Upload the image artifact
        uses: actions/upload-artifact@v4
        with:
          name: debian-minimal-image
          path: debian-minimal-image.tar.gz
      
      - name: Upload the metadata artifactr
        uses: actions/upload-artifact@v4
        with:
          name: metadata
          path: metadata.tar.gz
